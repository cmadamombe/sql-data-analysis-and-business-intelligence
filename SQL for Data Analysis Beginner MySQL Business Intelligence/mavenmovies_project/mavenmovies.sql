-- Script was generated by Devart dbForge Studio 2020 for MySQL, Version 9.0.567.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 21 Apr 2022 10:43:30
-- Target server version: 8.0.28
-- Please backup your target database before running this script 

CREATE DATABASE IF NOT EXISTS mavenmovies COLLATE utf8mb4_0900_ai_ci;
USE mavenmovies;

/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
--
-- Create table `country`
--
CREATE TABLE country (
  country_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  country VARCHAR(50) NOT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (country_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 110,
AVG_ROW_LENGTH = 150,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;
--
-- Create table `city`
--
CREATE TABLE city (
  city_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  city VARCHAR(50) NOT NULL,
  country_id SMALLINT UNSIGNED NOT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (city_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 601,
AVG_ROW_LENGTH = 81,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `idx_fk_country_id` on table `city`
--
ALTER TABLE city 
  ADD INDEX idx_fk_country_id(country_id);

--
-- Create foreign key
--
ALTER TABLE city 
  ADD CONSTRAINT fk_city_country FOREIGN KEY (country_id)
    REFERENCES country(country_id) ON UPDATE CASCADE;
--
-- Create table `address`
--
CREATE TABLE address (
  address_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  address VARCHAR(50) NOT NULL,
  address2 VARCHAR(50) DEFAULT NULL,
  district VARCHAR(20) NOT NULL,
  city_id SMALLINT UNSIGNED NOT NULL,
  postal_code VARCHAR(10) DEFAULT NULL,
  phone VARCHAR(20) NOT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (address_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 606,
AVG_ROW_LENGTH = 135,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `idx_fk_city_id` on table `address`
--
ALTER TABLE address 
  ADD INDEX idx_fk_city_id(city_id);

--
-- Create foreign key
--
ALTER TABLE address 
  ADD CONSTRAINT fk_address_city FOREIGN KEY (city_id)
    REFERENCES city(city_id) ON UPDATE CASCADE;
--
-- Create table `store`
--
CREATE TABLE store (
  store_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
  manager_staff_id TINYINT UNSIGNED NOT NULL,
  address_id SMALLINT UNSIGNED NOT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (store_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `idx_fk_address_id` on table `store`
--
ALTER TABLE store 
  ADD INDEX idx_fk_address_id(address_id);

--
-- Create index `idx_unique_manager` on table `store`
--
ALTER TABLE store 
  ADD UNIQUE INDEX idx_unique_manager(manager_staff_id);

--
-- Create foreign key
--
ALTER TABLE store 
  ADD CONSTRAINT fk_store_address FOREIGN KEY (address_id)
    REFERENCES address(address_id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE store 
  ADD CONSTRAINT fk_store_staff FOREIGN KEY (manager_staff_id)
    REFERENCES staff(staff_id) ON UPDATE CASCADE;
--
-- Create table `customer`
--
CREATE TABLE customer (
  customer_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  store_id TINYINT UNSIGNED NOT NULL,
  first_name VARCHAR(45) NOT NULL,
  last_name VARCHAR(45) NOT NULL,
  email VARCHAR(50) DEFAULT NULL,
  address_id SMALLINT UNSIGNED NOT NULL,
  active TINYINT(1) NOT NULL DEFAULT 1,
  create_date DATETIME NOT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (customer_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 600,
AVG_ROW_LENGTH = 136,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `idx_fk_address_id` on table `customer`
--
ALTER TABLE customer 
  ADD INDEX idx_fk_address_id(address_id);

--
-- Create index `idx_fk_store_id` on table `customer`
--
ALTER TABLE customer 
  ADD INDEX idx_fk_store_id(store_id);

--
-- Create index `idx_last_name` on table `customer`
--
ALTER TABLE customer 
  ADD INDEX idx_last_name(last_name);

--
-- Create foreign key
--
ALTER TABLE customer 
  ADD CONSTRAINT fk_customer_address FOREIGN KEY (address_id)
    REFERENCES address(address_id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE customer 
  ADD CONSTRAINT fk_customer_store FOREIGN KEY (store_id)
    REFERENCES store(store_id) ON UPDATE CASCADE;
DELIMITER $$

--
-- Create trigger `customer_create_date`
--
CREATE TRIGGER customer_create_date
	BEFORE INSERT
	ON customer
	FOR EACH ROW
SET NEW.create_date = NOW()
$$

DELIMITER ;
--
-- Create view `customer_list`
--
CREATE 
VIEW customer_list
AS
	select `cu`.`customer_id` AS `ID`,concat(`cu`.`first_name`,_utf8mb4' ',`cu`.`last_name`) AS `name`,`a`.`address` AS `address`,`a`.`postal_code` AS `zip code`,`a`.`phone` AS `phone`,`city`.`city` AS `city`,`country`.`country` AS `country`,if(`cu`.`active`,_utf8mb4'active',_utf8mb4'') AS `notes`,`cu`.`store_id` AS `SID` from (((`customer` `cu` join `address` `a` on((`cu`.`address_id` = `a`.`address_id`))) join `city` on((`a`.`city_id` = `city`.`city_id`))) join `country` on((`city`.`country_id` = `country`.`country_id`)));
--
-- Create table `staff`
--
CREATE TABLE staff (
  staff_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
  first_name VARCHAR(45) NOT NULL,
  last_name VARCHAR(45) NOT NULL,
  address_id SMALLINT UNSIGNED NOT NULL,
  picture BLOB DEFAULT NULL,
  email VARCHAR(50) DEFAULT NULL,
  store_id TINYINT UNSIGNED NOT NULL,
  active TINYINT(1) NOT NULL DEFAULT 1,
  username VARCHAR(16) NOT NULL,
  password VARCHAR(40) DEFAULT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (staff_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 32768,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `idx_fk_address_id` on table `staff`
--
ALTER TABLE staff 
  ADD INDEX idx_fk_address_id(address_id);

--
-- Create index `idx_fk_store_id` on table `staff`
--
ALTER TABLE staff 
  ADD INDEX idx_fk_store_id(store_id);

--
-- Create foreign key
--
ALTER TABLE staff 
  ADD CONSTRAINT fk_staff_address FOREIGN KEY (address_id)
    REFERENCES address(address_id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE staff 
  ADD CONSTRAINT fk_staff_store FOREIGN KEY (store_id)
    REFERENCES store(store_id) ON UPDATE CASCADE;
--
-- Create view `staff_list`
--
CREATE 
VIEW staff_list
AS
	select `s`.`staff_id` AS `ID`,concat(`s`.`first_name`,_utf8mb4' ',`s`.`last_name`) AS `name`,`a`.`address` AS `address`,`a`.`postal_code` AS `zip code`,`a`.`phone` AS `phone`,`city`.`city` AS `city`,`country`.`country` AS `country`,`s`.`store_id` AS `SID` from (((`staff` `s` join `address` `a` on((`s`.`address_id` = `a`.`address_id`))) join `city` on((`a`.`city_id` = `city`.`city_id`))) join `country` on((`city`.`country_id` = `country`.`country_id`)));
--
-- Create table `language`
--
CREATE TABLE language (
  language_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
  name CHAR(20) NOT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (language_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;
--
-- Create table `film`
--
CREATE TABLE film (
  film_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  title VARCHAR(255) NOT NULL,
  description TEXT DEFAULT NULL,
  release_year YEAR DEFAULT NULL,
  language_id TINYINT UNSIGNED NOT NULL,
  original_language_id TINYINT UNSIGNED DEFAULT NULL,
  rental_duration TINYINT UNSIGNED NOT NULL DEFAULT 3,
  rental_rate DECIMAL(4, 2) NOT NULL DEFAULT 4.99,
  length SMALLINT UNSIGNED DEFAULT NULL,
  replacement_cost DECIMAL(5, 2) NOT NULL DEFAULT 19.99,
  rating ENUM('G','PG','PG-13','R','NC-17') DEFAULT 'G',
  special_features SET('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') DEFAULT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (film_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 1001,
AVG_ROW_LENGTH = 196,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `idx_fk_language_id` on table `film`
--
ALTER TABLE film 
  ADD INDEX idx_fk_language_id(language_id);

--
-- Create index `idx_fk_original_language_id` on table `film`
--
ALTER TABLE film 
  ADD INDEX idx_fk_original_language_id(original_language_id);

--
-- Create index `idx_title` on table `film`
--
ALTER TABLE film 
  ADD INDEX idx_title(title);

--
-- Create foreign key
--
ALTER TABLE film 
  ADD CONSTRAINT fk_film_language FOREIGN KEY (language_id)
    REFERENCES language(language_id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE film 
  ADD CONSTRAINT fk_film_language_original FOREIGN KEY (original_language_id)
    REFERENCES language(language_id) ON UPDATE CASCADE;
--
-- Create table `inventory`
--
CREATE TABLE inventory (
  inventory_id MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,
  film_id SMALLINT UNSIGNED NOT NULL,
  store_id TINYINT UNSIGNED NOT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (inventory_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 4582,
AVG_ROW_LENGTH = 39,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `idx_fk_film_id` on table `inventory`
--
ALTER TABLE inventory 
  ADD INDEX idx_fk_film_id(film_id);

--
-- Create index `idx_store_id_film_id` on table `inventory`
--
ALTER TABLE inventory 
  ADD INDEX idx_store_id_film_id(store_id, film_id);

--
-- Create foreign key
--
ALTER TABLE inventory 
  ADD CONSTRAINT fk_inventory_film FOREIGN KEY (film_id)
    REFERENCES film(film_id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE inventory 
  ADD CONSTRAINT fk_inventory_store FOREIGN KEY (store_id)
    REFERENCES store(store_id) ON UPDATE CASCADE;
--
-- Create table `rental`
--
CREATE TABLE rental (
  rental_id INT NOT NULL AUTO_INCREMENT,
  rental_date DATETIME NOT NULL,
  inventory_id MEDIUMINT UNSIGNED NOT NULL,
  customer_id SMALLINT UNSIGNED NOT NULL,
  return_date DATETIME DEFAULT NULL,
  staff_id TINYINT UNSIGNED NOT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (rental_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 16050,
AVG_ROW_LENGTH = 99,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `idx_fk_customer_id` on table `rental`
--
ALTER TABLE rental 
  ADD INDEX idx_fk_customer_id(customer_id);

--
-- Create index `idx_fk_inventory_id` on table `rental`
--
ALTER TABLE rental 
  ADD INDEX idx_fk_inventory_id(inventory_id);

--
-- Create index `idx_fk_staff_id` on table `rental`
--
ALTER TABLE rental 
  ADD INDEX idx_fk_staff_id(staff_id);

--
-- Create index `rental_date` on table `rental`
--
ALTER TABLE rental 
  ADD UNIQUE INDEX rental_date(rental_date, inventory_id, customer_id);

--
-- Create foreign key
--
ALTER TABLE rental 
  ADD CONSTRAINT fk_rental_customer FOREIGN KEY (customer_id)
    REFERENCES customer(customer_id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE rental 
  ADD CONSTRAINT fk_rental_inventory FOREIGN KEY (inventory_id)
    REFERENCES inventory(inventory_id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE rental 
  ADD CONSTRAINT fk_rental_staff FOREIGN KEY (staff_id)
    REFERENCES staff(staff_id) ON UPDATE CASCADE;
DELIMITER $$

--
-- Create trigger `rental_date`
--
CREATE TRIGGER rental_date
	BEFORE INSERT
	ON rental
	FOR EACH ROW
SET NEW.rental_date = NOW()
$$

DELIMITER ;
DELIMITER $$

--
-- Create function `inventory_in_stock`
--
CREATE FUNCTION inventory_in_stock(p_inventory_id INT)
  RETURNS TINYINT(1)
  READS SQL DATA
BEGIN
    DECLARE v_rentals INT;
    DECLARE v_out     INT;

    #AN ITEM IS IN-STOCK IF THERE ARE EITHER NO ROWS IN THE rental TABLE
    #FOR THE ITEM OR ALL ROWS HAVE return_date POPULATED

    SELECT COUNT(*) INTO v_rentals
    FROM rental
    WHERE inventory_id = p_inventory_id;

    IF v_rentals = 0 THEN
      RETURN TRUE;
    END IF;

    SELECT COUNT(rental_id) INTO v_out
    FROM inventory LEFT JOIN rental USING(inventory_id)
    WHERE inventory.inventory_id = p_inventory_id
    AND rental.return_date IS NULL;

    IF v_out > 0 THEN
      RETURN FALSE;
    ELSE
      RETURN TRUE;
    END IF;
END
$$

DELIMITER ;
DELIMITER $$

--
-- Create procedure `film_not_in_stock`
--
CREATE PROCEDURE film_not_in_stock(IN p_film_id INT, IN p_store_id INT, OUT p_film_count INT)
  READS SQL DATA
BEGIN
     SELECT inventory_id
     FROM inventory
     WHERE film_id = p_film_id
     AND store_id = p_store_id
     AND NOT inventory_in_stock(inventory_id);

     SELECT COUNT(*) INTO p_film_count;
END
$$

DELIMITER ;
DELIMITER $$

--
-- Create procedure `film_in_stock`
--
CREATE PROCEDURE film_in_stock(IN p_film_id INT, IN p_store_id INT, OUT p_film_count INT)
  READS SQL DATA
BEGIN
     SELECT inventory_id
     FROM inventory
     WHERE film_id = p_film_id
     AND store_id = p_store_id
     AND inventory_in_stock(inventory_id);

     SELECT COUNT(*) INTO p_film_count;
END
$$

DELIMITER ;
DELIMITER $$

--
-- Create function `inventory_held_by_customer`
--
CREATE FUNCTION inventory_held_by_customer(p_inventory_id INT)
  RETURNS INT(11)
  READS SQL DATA
BEGIN
  DECLARE v_customer_id INT;
  DECLARE EXIT HANDLER FOR NOT FOUND RETURN NULL;

  SELECT customer_id INTO v_customer_id
  FROM rental
  WHERE return_date IS NULL
  AND inventory_id = p_inventory_id;

  RETURN v_customer_id;
END
$$

DELIMITER ;
--
-- Create table `payment`
--
CREATE TABLE payment (
  payment_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  customer_id SMALLINT UNSIGNED NOT NULL,
  staff_id TINYINT UNSIGNED NOT NULL,
  rental_id INT DEFAULT NULL,
  amount DECIMAL(5, 2) NOT NULL,
  payment_date DATETIME NOT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (payment_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 16050,
AVG_ROW_LENGTH = 99,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `idx_fk_customer_id` on table `payment`
--
ALTER TABLE payment 
  ADD INDEX idx_fk_customer_id(customer_id);

--
-- Create index `idx_fk_staff_id` on table `payment`
--
ALTER TABLE payment 
  ADD INDEX idx_fk_staff_id(staff_id);

--
-- Create foreign key
--
ALTER TABLE payment 
  ADD CONSTRAINT fk_payment_customer FOREIGN KEY (customer_id)
    REFERENCES customer(customer_id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE payment 
  ADD CONSTRAINT fk_payment_rental FOREIGN KEY (rental_id)
    REFERENCES rental(rental_id) ON DELETE SET NULL ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE payment 
  ADD CONSTRAINT fk_payment_staff FOREIGN KEY (staff_id)
    REFERENCES staff(staff_id) ON UPDATE CASCADE;
DELIMITER $$

--
-- Create trigger `payment_date`
--
CREATE TRIGGER payment_date
	BEFORE INSERT
	ON payment
	FOR EACH ROW
SET NEW.payment_date = NOW()
$$

DELIMITER ;
DELIMITER $$

--
-- Create function `get_customer_balance`
--
CREATE FUNCTION get_customer_balance(p_customer_id INT, p_effective_date DATETIME)
  RETURNS DECIMAL(5, 2)
  DETERMINISTIC
  READS SQL DATA
BEGIN

       #OK, WE NEED TO CALCULATE THE CURRENT BALANCE GIVEN A CUSTOMER_ID AND A DATE
       #THAT WE WANT THE BALANCE TO BE EFFECTIVE FOR. THE BALANCE IS:
       #   1) RENTAL FEES FOR ALL PREVIOUS RENTALS
       #   2) ONE DOLLAR FOR EVERY DAY THE PREVIOUS RENTALS ARE OVERDUE
       #   3) IF A FILM IS MORE THAN RENTAL_DURATION * 2 OVERDUE, CHARGE THE REPLACEMENT_COST
       #   4) SUBTRACT ALL PAYMENTS MADE BEFORE THE DATE SPECIFIED

  DECLARE v_rentfees DECIMAL(5,2); #FEES PAID TO RENT THE VIDEOS INITIALLY
  DECLARE v_overfees INTEGER;      #LATE FEES FOR PRIOR RENTALS
  DECLARE v_payments DECIMAL(5,2); #SUM OF PAYMENTS MADE PREVIOUSLY

  SELECT IFNULL(SUM(film.rental_rate),0) INTO v_rentfees
    FROM film, inventory, rental
    WHERE film.film_id = inventory.film_id
      AND inventory.inventory_id = rental.inventory_id
      AND rental.rental_date <= p_effective_date
      AND rental.customer_id = p_customer_id;

  SELECT IFNULL(SUM(IF((TO_DAYS(rental.return_date) - TO_DAYS(rental.rental_date)) > film.rental_duration,
        ((TO_DAYS(rental.return_date) - TO_DAYS(rental.rental_date)) - film.rental_duration),0)),0) INTO v_overfees
    FROM rental, inventory, film
    WHERE film.film_id = inventory.film_id
      AND inventory.inventory_id = rental.inventory_id
      AND rental.rental_date <= p_effective_date
      AND rental.customer_id = p_customer_id;


  SELECT IFNULL(SUM(payment.amount),0) INTO v_payments
    FROM payment

    WHERE payment.payment_date <= p_effective_date
    AND payment.customer_id = p_customer_id;

  RETURN v_rentfees + v_overfees - v_payments;
END
$$

DELIMITER ;
DELIMITER $$

--
-- Create procedure `rewards_report`
--
CREATE PROCEDURE rewards_report(
    IN min_monthly_purchases TINYINT UNSIGNED
    , IN min_dollar_amount_purchased DECIMAL(10,2)
    , OUT count_rewardees INT
)
  READS SQL DATA
  COMMENT 'Provides a customizable report on best customers'
proc: BEGIN

    DECLARE last_month_start DATE;
    DECLARE last_month_end DATE;

    /* Some sanity checks... */
    IF min_monthly_purchases = 0 THEN
        SELECT 'Minimum monthly purchases parameter must be > 0';
        LEAVE proc;
    END IF;
    IF min_dollar_amount_purchased = 0.00 THEN
        SELECT 'Minimum monthly dollar amount purchased parameter must be > $0.00';
        LEAVE proc;
    END IF;

    /* Determine start and end time periods */
    SET last_month_start = DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH);
    SET last_month_start = STR_TO_DATE(CONCAT(YEAR(last_month_start),'-',MONTH(last_month_start),'-01'),'%Y-%m-%d');
    SET last_month_end = LAST_DAY(last_month_start);

    /*
        Create a temporary storage area for
        Customer IDs.
    */
    CREATE TEMPORARY TABLE tmpCustomer (customer_id SMALLINT UNSIGNED NOT NULL PRIMARY KEY);

    /*
        Find all customers meeting the
        monthly purchase requirements
    */
    INSERT INTO tmpCustomer (customer_id)
    SELECT p.customer_id
    FROM payment AS p
    WHERE DATE(p.payment_date) BETWEEN last_month_start AND last_month_end
    GROUP BY customer_id
    HAVING SUM(p.amount) > min_dollar_amount_purchased
    AND COUNT(customer_id) > min_monthly_purchases;

    /* Populate OUT parameter with count of found customers */
    SELECT COUNT(*) FROM tmpCustomer INTO count_rewardees;

    /*
        Output ALL customer information of matching rewardees.
        Customize output as needed.
    */
    SELECT c.*
    FROM tmpCustomer AS t
    INNER JOIN customer AS c ON t.customer_id = c.customer_id;

    /* Clean up */
    DROP TABLE tmpCustomer;
END
$$

DELIMITER ;
--
-- Create view `sales_by_store`
--
CREATE 
VIEW sales_by_store
AS
	select concat(`c`.`city`,_utf8mb4',',`cy`.`country`) AS `store`,concat(`m`.`first_name`,_utf8mb4' ',`m`.`last_name`) AS `manager`,sum(`p`.`amount`) AS `total_sales` from (((((((`payment` `p` join `rental` `r` on((`p`.`rental_id` = `r`.`rental_id`))) join `inventory` `i` on((`r`.`inventory_id` = `i`.`inventory_id`))) join `store` `s` on((`i`.`store_id` = `s`.`store_id`))) join `address` `a` on((`s`.`address_id` = `a`.`address_id`))) join `city` `c` on((`a`.`city_id` = `c`.`city_id`))) join `country` `cy` on((`c`.`country_id` = `cy`.`country_id`))) join `staff` `m` on((`s`.`manager_staff_id` = `m`.`staff_id`))) group by `s`.`store_id` order by `cy`.`country`,`c`.`city`;
--
-- Create table `category`
--
CREATE TABLE category (
  category_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
  name VARCHAR(25) NOT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (category_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 17,
AVG_ROW_LENGTH = 1024,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;
--
-- Create table `film_category`
--
CREATE TABLE film_category (
  film_id SMALLINT UNSIGNED NOT NULL,
  category_id TINYINT UNSIGNED NOT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (film_id, category_id)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 65,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE film_category 
  ADD CONSTRAINT fk_film_category_category FOREIGN KEY (category_id)
    REFERENCES category(category_id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE film_category 
  ADD CONSTRAINT fk_film_category_film FOREIGN KEY (film_id)
    REFERENCES film(film_id) ON UPDATE CASCADE;
--
-- Create view `sales_by_film_category`
--
CREATE 
VIEW sales_by_film_category
AS
	select `c`.`name` AS `category`,sum(`p`.`amount`) AS `total_sales` from (((((`payment` `p` join `rental` `r` on((`p`.`rental_id` = `r`.`rental_id`))) join `inventory` `i` on((`r`.`inventory_id` = `i`.`inventory_id`))) join `film` `f` on((`i`.`film_id` = `f`.`film_id`))) join `film_category` `fc` on((`f`.`film_id` = `fc`.`film_id`))) join `category` `c` on((`fc`.`category_id` = `c`.`category_id`))) group by `c`.`name` order by `total_sales` desc;
--
-- Create table `actor`
--
CREATE TABLE actor (
  actor_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  first_name VARCHAR(45) NOT NULL,
  last_name VARCHAR(45) NOT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (actor_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 201,
AVG_ROW_LENGTH = 81,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `idx_actor_last_name` on table `actor`
--
ALTER TABLE actor 
  ADD INDEX idx_actor_last_name(last_name);
--
-- Create table `film_actor`
--
CREATE TABLE film_actor (
  actor_id SMALLINT UNSIGNED NOT NULL,
  film_id SMALLINT UNSIGNED NOT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (actor_id, film_id)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 35,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `idx_fk_film_id` on table `film_actor`
--
ALTER TABLE film_actor 
  ADD INDEX idx_fk_film_id(film_id);

--
-- Create foreign key
--
ALTER TABLE film_actor 
  ADD CONSTRAINT fk_film_actor_actor FOREIGN KEY (actor_id)
    REFERENCES actor(actor_id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE film_actor 
  ADD CONSTRAINT fk_film_actor_film FOREIGN KEY (film_id)
    REFERENCES film(film_id) ON UPDATE CASCADE;
--
-- Create view `nicer_but_slower_film_list`
--
CREATE 
VIEW nicer_but_slower_film_list
AS
	select `film`.`film_id` AS `FID`,`film`.`title` AS `title`,`film`.`description` AS `description`,`category`.`name` AS `category`,`film`.`rental_rate` AS `price`,`film`.`length` AS `length`,`film`.`rating` AS `rating`,group_concat(concat(concat(upper(substr(`actor`.`first_name`,1,1)),lower(substr(`actor`.`first_name`,2,length(`actor`.`first_name`))),_utf8mb4' ',concat(upper(substr(`actor`.`last_name`,1,1)),lower(substr(`actor`.`last_name`,2,length(`actor`.`last_name`)))))) separator ', ') AS `actors` from ((((`category` left join `film_category` on((`category`.`category_id` = `film_category`.`category_id`))) left join `film` on((`film_category`.`film_id` = `film`.`film_id`))) join `film_actor` on((`film`.`film_id` = `film_actor`.`film_id`))) join `actor` on((`film_actor`.`actor_id` = `actor`.`actor_id`))) group by `film`.`film_id`,`category`.`name`;
--
-- Create view `film_list`
--
CREATE 
VIEW film_list
AS
	select `film`.`film_id` AS `FID`,`film`.`title` AS `title`,`film`.`description` AS `description`,`category`.`name` AS `category`,`film`.`rental_rate` AS `price`,`film`.`length` AS `length`,`film`.`rating` AS `rating`,group_concat(concat(`actor`.`first_name`,_utf8mb4' ',`actor`.`last_name`) separator ', ') AS `actors` from ((((`category` left join `film_category` on((`category`.`category_id` = `film_category`.`category_id`))) left join `film` on((`film_category`.`film_id` = `film`.`film_id`))) join `film_actor` on((`film`.`film_id` = `film_actor`.`film_id`))) join `actor` on((`film_actor`.`actor_id` = `actor`.`actor_id`))) group by `film`.`film_id`,`category`.`name`;
--
-- Create view `actor_info`
--
CREATE 
VIEW actor_info
AS
	select `a`.`actor_id` AS `actor_id`,`a`.`first_name` AS `first_name`,`a`.`last_name` AS `last_name`,group_concat(distinct concat(`c`.`name`,': ',(select group_concat(`f`.`title` order by `f`.`title` ASC separator ', ') from ((`film` `f` join `film_category` `fc` on((`f`.`film_id` = `fc`.`film_id`))) join `film_actor` `fa` on((`f`.`film_id` = `fa`.`film_id`))) where ((`fc`.`category_id` = `c`.`category_id`) and (`fa`.`actor_id` = `a`.`actor_id`)))) order by `c`.`name` ASC separator '; ') AS `film_info` from (((`actor` `a` left join `film_actor` `fa` on((`a`.`actor_id` = `fa`.`actor_id`))) left join `film_category` `fc` on((`fa`.`film_id` = `fc`.`film_id`))) left join `category` `c` on((`fc`.`category_id` = `c`.`category_id`))) group by `a`.`actor_id`,`a`.`first_name`,`a`.`last_name`;
--
-- Create table `film_text`
--
CREATE TABLE film_text (
  film_id SMALLINT NOT NULL,
  title VARCHAR(255) NOT NULL,
  description TEXT DEFAULT NULL,
  PRIMARY KEY (film_id)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 180,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `idx_title_description` on table `film_text`
--
ALTER TABLE film_text 
  ADD FULLTEXT INDEX idx_title_description(title, description);
DELIMITER $$

--
-- Create trigger `upd_film`
--
CREATE TRIGGER upd_film
	AFTER UPDATE
	ON film
	FOR EACH ROW
BEGIN
    IF (old.title != new.title) OR (old.description != new.description) OR (old.film_id != new.film_id)
    THEN
        UPDATE film_text
            SET title=new.title,
                description=new.description,
                film_id=new.film_id
        WHERE film_id=old.film_id;
    END IF;
  END
$$

DELIMITER ;
DELIMITER $$

--
-- Create trigger `ins_film`
--
CREATE TRIGGER ins_film
	AFTER INSERT
	ON film
	FOR EACH ROW
BEGIN
    INSERT INTO film_text (film_id, title, description)
        VALUES (new.film_id, new.title, new.description);
  END
$$

DELIMITER ;
DELIMITER $$

--
-- Create trigger `del_film`
--
CREATE TRIGGER del_film
	AFTER DELETE
	ON film
	FOR EACH ROW
BEGIN
    DELETE FROM film_text WHERE film_id = old.film_id;
  END
$$

DELIMITER ;
--
-- Create table `investor`
--
CREATE TABLE investor (
  investor_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  first_name VARCHAR(45) NOT NULL,
  last_name VARCHAR(45) NOT NULL,
  company_name VARCHAR(45) NOT NULL,
  PRIMARY KEY (investor_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 4,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;
--
-- Create table `advisor`
--
CREATE TABLE advisor (
  advisor_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  first_name VARCHAR(45) NOT NULL,
  last_name VARCHAR(45) NOT NULL,
  is_chairmain SMALLINT UNSIGNED NOT NULL,
  PRIMARY KEY (advisor_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 5,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;
--
-- Create table `actor_award`
--
CREATE TABLE actor_award (
  actor_award_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  actor_id SMALLINT DEFAULT NULL,
  first_name VARCHAR(45) NOT NULL,
  last_name VARCHAR(45) NOT NULL,
  awards VARCHAR(45) NOT NULL,
  last_update DATETIME NOT NULL,
  PRIMARY KEY (actor_award_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 158,
AVG_ROW_LENGTH = 104,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `idx_actor_last_name` on table `actor_award`
--
ALTER TABLE actor_award 
  ADD INDEX idx_actor_last_name(last_name);

/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;